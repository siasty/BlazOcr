@page "/ocr"

@using System.IO;
@using Blazor.FileReader;
@using Spire.Pdf;
@using Tesseract;
@using Spire.Pdf.Graphics;
@inject IFileReaderService fileReaderService;

<h3>Ocr</h3>
<input type="file" accept="application/pdf" @ref=inputElement />
<button @onclick=ReadFile>Read file</button>
<hr>
<div class="row">
    <div class="column" >
        <img src="@ImageUrl" alt="Image" asp-append-version="true" width="800px" />
    </div>
    <div class="column">
        <textarea rows="25" cols="50">
             @text
        </textarea>
    </div>
</div>

@code {
    ElementReference inputElement;
    System.Drawing.Image _image;
    string ImageUrl;
    string text;

    List<System.Drawing.Rectangle> rectangles = new List<System.Drawing.Rectangle>
    {
        new System.Drawing.Rectangle(100, 780, 3000, 250),
        new System.Drawing.Rectangle(100, 1780, 3000, 250),
        new System.Drawing.Rectangle(100, 3520, 3000, 250),
        new System.Drawing.Rectangle(100, 3900, 3000, 250)
    };
}

@functions {

    public async Task ReadFile()
    {
        ImageUrl = null;
        foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
        {

            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4089))
            {
                var pdfToImg = new NReco.PdfRenderer.PdfToImageConverter();
                pdfToImg.Dpi = 800;
                _image = pdfToImg.GenerateImage(memoryStream , 0 );
                using (System.Drawing.Graphics g = System.Drawing.Graphics.FromImage(_image))
                {
                    foreach (var item in rectangles)
                    {
                        g.DrawRectangle(new System.Drawing.Pen(System.Drawing.Color.Red), item);
                    }
                }

                using (var ms = new MemoryStream())
                {
                    _image.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                    ImageUrl = "data:image;base64," + Convert.ToBase64String(ms.ToArray());
                }
                using (var ms = new MemoryStream())
                {
                    _image.Save(ms, System.Drawing.Imaging.ImageFormat.Tiff);

                    using (var tEngine = new TesseractEngine(@"tessdata", "pol2", EngineMode.Default))
                    {
                        using (var img = Pix.LoadTiffFromMemory(ms.ToArray()))
                        {
                            foreach (var item in rectangles)
                            {
                                using (var page = tEngine.Process(img,new Rect(item.X,item.Y,item.Width,item.Height), PageSegMode.Auto))
                                {
                                    text += page.GetText();
                                }
                            }
                        }
                    }
                }
            }
        }

    }
}